/*
 * ar0234_mode_tbls.h - ar0234 sensor mode tables
 *
 * Copyright (c) 2018-2023, NVIDIA CORPORATION.  All rights reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */
#ifndef __AR0234_I2C_TABLES__
#define __AR0234_I2C_TABLES__

#include <media/camera_common.h>

#define AR0234_TABLE_WAIT_MS 0xff00
#define AR0234_TABLE_END 0xff01
#define AR0234_MAX_RETRIES 3
#define AR0234_WAIT_MS_STOP 1
#define AR0234_WAIT_MS_START 30
#define AR0234_WAIT_MS_STREAM 210
#define AR0234_GAIN_TABLE_SIZE 255

#define AR0234_EEPROM_ADDRESS 0x54
#define AR0234_EEPROM_ADDRESS_R 0x58
#define AR0234_EEPROM_SIZE 512
#define AR0234_EEPROM_STR_SIZE (AR0234_EEPROM_SIZE * 2)
#define AR0234_EEPROM_BLOCK_SIZE (1 << 8)
#define AR0234_EEPROM_NUM_BLOCKS (AR0234_EEPROM_SIZE / AR0234_EEPROM_BLOCK_SIZE)

#define ar0234_reg struct reg_16

struct index_reg_8 {
	u16 source;
	u16 addr;
	u16 val;
};

static struct index_reg_8 ar0234_start[] = {
	//	{0x06, 0x301a, 0x205C},
	{ 0x06, 0x30ce, 0x0120 },
	{ 0x06, 0x301A, 0x295C }, // RESET_REGISTER

	{ 0x00, AR0234_TABLE_END, 0x00 }
};

static struct index_reg_8 ar0234_stop[] = { { 0x06, 0x301a, 0x2058 },

					    { 0x00, AR0234_TABLE_END, 0x00 } };

static struct index_reg_8 ar0234_Double_Dser_Ser[] = {

	{ 0x94, 0x0010, 0x31 }, // Apply Reset Oneshot for changes
	{ 0x80, 0x0010, 0x21 }, // Apply Reset Oneshot for changes
	{ 0x80, 0x0330,
	  0x06 }, // No Virtual Channel mapping, Set SER to 2x4 mode (phy_config = 0)
	{ 0x80, 0x0332,
	  0x4E }, // Verify lane map is at its default (phy1_lane_map = 4'hE, phy2_lane_map = 4'h4 )
	{ 0x80, 0x0333, 0xE4 }, // Additional lane map
	{ 0x80, 0x0331,
	  0x77 }, // Set 4 lanes for serializer (ctrl1_num_lanes = 3)
	{ 0x80, 0x0311, 0x41 }, // Start video from port A
	{ 0x80, 0x0308,
	  0x74 }, // Enable info lines. Additional start bits for Port A. Use data from port A for all pipelines.
	{ 0x80, 0x0314,
	  0x2B }, // Route 16bit DCG (DT = 0x30) to VIDEO_X (Bit 6 enable)
	{ 0x80, 0x0316,
	  0x22 }, // Route 12bit RAW (DT = 0x2C) to VIDEO_Y (Bit 6 enable)
	{ 0x80, 0x0318, 0x2B }, // Route EMBEDDED8 to VIDEO_Z (Bit 6 enable)
	{ 0x80, 0x031A, 0x22 }, // Unused VIDEO_U
	{ 0x80, 0x0002,
	  0xff }, // Make sure all pipelines start transmission (VID_TX_EN_X/Y/Z/U = 1)
	{ 0x80, 0x0053, 0x10 }, // Pipe X stream select 0
	{ 0x80, 0x0057, 0x11 }, // Pipe Y stream select 2
	{ 0x80, 0x005B, 0x12 }, // Pipe Z stream select 1
	{ 0x80, 0x005F, 0x13 }, // Pipe U stream select 3
	{ 0x94, 0x0330, 0x04 }, // Set MIPI Phy Mode: 2x(1x4) mode
	{ 0x94, 0x0333, 0x4E }, // lane maps - all 4 ports mapped straight
	{ 0x94, 0x0334, 0xE4 }, // Additional lane map
	{ 0x94, 0x040A,
	  0x00 }, // lane count - 0 lanes striping on controller 0 (Port A slave in 2x1x4 mode).
	{ 0x94, 0x044A,
	  0x40 }, // lane count - 4 lanes striping on controller 1 (Port A master in 2x1x4 mode).
	{ 0x94, 0x048A,
	  0x40 }, // lane count - 4 lanes striping on controller 2 (Port B master in 2x1x4 mode).
	{ 0x94, 0x04CA,
	  0x00 }, // lane count - 0 lanes striping on controller 3 (Port B slave in 2x1x4 mode).
	{ 0x94, 0x031D,
	  0x39 }, // MIPI clock rate -  from controller 0 clock (Port A slave in 2x1x4 mode).
	{ 0x94, 0x0320,
	  0x39 }, // MIPI clock rate - 600Mbps from controller 1 clock (Port A master in 2x1x4 mode).
	{ 0x94, 0x0323,
	  0x39 }, // MIPI clock rate -  from controller 2 clock (Port B master in 2x1x4 mode).
	{ 0x94, 0x0326,
	  0x39 }, // MIPI clock rate -  from controller 2 clock (Port B slave in 2x1x4 mode).
	{ 0x94, 0x0050, 0x01 }, // Route data from stream 0 to pipe X
	{ 0x94, 0x0051, 0x00 }, // Route data from stream 0 to pipe Y
	{ 0x94, 0x0052, 0x02 }, // Route data from stream 0 to pipe Z
	{ 0x94, 0x0053, 0x03 }, // Route data from stream 0 to pipe U
	{ 0x94, 0x030d, 0x02 }, //dist vs pip y
	{ 0x94, 0x048b, 0x07 }, // use map0 for vc for  pip Y
	{ 0x94, 0x04ad, 0x15 }, //map to phy1 pip y
	{ 0x94, 0x048d, 0x2b }, //source vs pip y
	{ 0x94, 0x048e, 0x6b }, //dist vs pip y

	{ 0x94, 0x048f, 0x40 }, //dist vs pip y
	{ 0x94, 0x0490, 0x40 }, //dist vs pip y
	{ 0x94, 0x0491, 0x41 }, //dist vs pip y
	{ 0x94, 0x0492, 0x41 }, //dist vs pip y

	{ 0x94, 0x0332, 0xF0 },
	{ 0x80, 0x02be, 0x90 }, // Enable sensor power down pin.
	{ 0x80, 0x02bf, 0x60 }, // Enable sensor reset pin.
	{ 0x80, 0x02ca, 0x80 }, // Enable sensor power down pin.
	{ 0x80, 0x02cb, 0x60 }, // Enable sensor reset pin.
	{ 0x94, 0x0005, 0x00 },
	{ 0x80, 0x02d3, 0x90 }, // Enable sensor power down pin.
	{ 0x80, 0x02d4, 0x60 }, // Enable sensor reset pin.
	{ 0x80, 0x02d6, 0x90 }, // Enable sensor power down pin.
	{ 0x80, 0x02d7, 0x60 }, // Enable sensor reset pin.

	{ 0x94, 0x03EF,
	  0xC0 }, // AUTO_FS_LINKS = 0, FS_USE_XTAL = 1, FS_LINK_[3:0] = 0
	{ 0x94, 0x03E2, 0x00 }, // Turn off auto master link selection
	{ 0x94, 0x03EA, 0x00 }, // OVLP window = 0
	{ 0x94, 0x03EB, 0x00 },
	// {0x94,0x03E5,0x35},	// 30Hz FSYNC
	// {0x94,0x03E6,0xB7},
	// {0x94,0x03E7,0x0C},
	// { 0x94, 0x03E5, 0x9A }, // 60Hz FSYNC
	// { 0x94, 0x03E6, 0x5B },
	// { 0x94, 0x03E7, 0x06 },
	{ 0x94, 0x03E5, 0xCD }, // 120Hz FSYNC
	{ 0x94, 0x03E6, 0x2D },
	{ 0x94, 0x03E7, 0x03 },

	{ 0x94, 0x03F1, 0x40 }, // FSYNC TX ID is 8
	{ 0x94, 0x03E0, 0x04 }, // Enable manual frame sync, output on MFP0

	{ 0x80, 0x02DB, 0x08 }, //MFP8 for FSIN
	{ 0x80, 0x02D9, 0x04 },
	//{0x94,0x02B3,0x83},//GPIO TX compensation
	//{0x94,0x02B4,0x10},
	{ 0x80, 0x02De, 0x08 }, //MFP8 for FSIN
	{ 0x80, 0x02Dc, 0x04 },

	{ 0x80, 0x02be, 0x83 },
	{ 0x80, 0x02bf, 0x11 },
	{ 0x94, 0x02B3, 0x04 },
	{ 0x94, 0x02B5, 0x11 },
	{ 0x94, 0x0003, 0x40 },
	{ 0x80, 0x02c4, 0x83 },
	{ 0x80, 0x02c5, 0x12 },
	{ 0x94, 0x02BC, 0x04 },
	{ 0x94, 0x02BE, 0x12 },

	{ 0x80, 0x0042, 0xB0 },
	{ 0x80, 0x0043, 0xA8 },

	{ 0x80, 0x0044, 0xB2 },
	{ 0x80, 0x0045, 0xAA },

	{ 0x00, AR0234_TABLE_END, 0x00 }
};

static struct index_reg_8 ar0234_1920x1200_crop_30fps[] = {
	{ 0x06, 0x301A, 0x00D9 },
	{ 0x06, AR0234_TABLE_WAIT_MS, 100 },

	{ 0x06, 0x3F4C, 0x121F },
	{ 0x06, 0x3F4E, 0x121F },
	{ 0x06, 0x3F50, 0x0B81 },
	{ 0x06, 0x31E0, 0x0003 },
	{ 0x06, 0x31E0, 0x0003 },
	{ 0x06, 0x30B0, 0x0028 },
	{ 0x06, 0x3088, 0x8000 },
	{ 0x06, 0x3086, 0xC1AE },
	{ 0x06, 0x3086, 0x327F },
	{ 0x06, 0x3086, 0x5780 },
	{ 0x06, 0x3086, 0x272F },
	{ 0x06, 0x3086, 0x7416 },
	{ 0x06, 0x3086, 0x7E13 },
	{ 0x06, 0x3086, 0x8000 },
	{ 0x06, 0x3086, 0x307E },
	{ 0x06, 0x3086, 0xFF80 },
	{ 0x06, 0x3086, 0x20C3 },
	{ 0x06, 0x3086, 0xB00E },
	{ 0x06, 0x3086, 0x8190 },
	{ 0x06, 0x3086, 0x1643 },
	{ 0x06, 0x3086, 0x1651 },
	{ 0x06, 0x3086, 0x9D3E },
	{ 0x06, 0x3086, 0x9545 },
	{ 0x06, 0x3086, 0x2209 },
	{ 0x06, 0x3086, 0x3781 },
	{ 0x06, 0x3086, 0x9016 },
	{ 0x06, 0x3086, 0x4316 },
	{ 0x06, 0x3086, 0x7F90 },
	{ 0x06, 0x3086, 0x8000 },
	{ 0x06, 0x3086, 0x387F },
	{ 0x06, 0x3086, 0x1380 },
	{ 0x06, 0x3086, 0x233B },
	{ 0x06, 0x3086, 0x7F93 },
	{ 0x06, 0x3086, 0x4502 },
	{ 0x06, 0x3086, 0x8000 },
	{ 0x06, 0x3086, 0x7FB0 },
	{ 0x06, 0x3086, 0x8D66 },
	{ 0x06, 0x3086, 0x7F90 },
	{ 0x06, 0x3086, 0x8192 },
	{ 0x06, 0x3086, 0x3C16 },
	{ 0x06, 0x3086, 0x357F },
	{ 0x06, 0x3086, 0x9345 },
	{ 0x06, 0x3086, 0x0280 },
	{ 0x06, 0x3086, 0x007F },
	{ 0x06, 0x3086, 0xB08D },
	{ 0x06, 0x3086, 0x667F },
	{ 0x06, 0x3086, 0x9081 },
	{ 0x06, 0x3086, 0x8237 },
	{ 0x06, 0x3086, 0x4502 },
	{ 0x06, 0x3086, 0x3681 },
	{ 0x06, 0x3086, 0x8044 },
	{ 0x06, 0x3086, 0x1631 },
	{ 0x06, 0x3086, 0x4374 },
	{ 0x06, 0x3086, 0x1678 },
	{ 0x06, 0x3086, 0x7B7D },
	{ 0x06, 0x3086, 0x4502 },
	{ 0x06, 0x3086, 0x450A },
	{ 0x06, 0x3086, 0x7E12 },
	{ 0x06, 0x3086, 0x8180 },
	{ 0x06, 0x3086, 0x377F },
	{ 0x06, 0x3086, 0x1045 },
	{ 0x06, 0x3086, 0x0A0E },
	{ 0x06, 0x3086, 0x7FD4 },
	{ 0x06, 0x3086, 0x8024 },
	{ 0x06, 0x3086, 0x0E82 },
	{ 0x06, 0x3086, 0x9CC2 },
	{ 0x06, 0x3086, 0xAFA8 },
	{ 0x06, 0x3086, 0xAA03 },
	{ 0x06, 0x3086, 0x430D },
	{ 0x06, 0x3086, 0x2D46 },
	{ 0x06, 0x3086, 0x4316 },
	{ 0x06, 0x3086, 0x5F16 },
	{ 0x06, 0x3086, 0x530D },
	{ 0x06, 0x3086, 0x1660 },
	{ 0x06, 0x3086, 0x401E },
	{ 0x06, 0x3086, 0x2904 },
	{ 0x06, 0x3086, 0x2984 },
	{ 0x06, 0x3086, 0x81E7 },
	{ 0x06, 0x3086, 0x816F },
	{ 0x06, 0x3086, 0x1706 },
	{ 0x06, 0x3086, 0x81E7 },
	{ 0x06, 0x3086, 0x7F81 },
	{ 0x06, 0x3086, 0x5C0D },
	{ 0x06, 0x3086, 0x5754 },
	{ 0x06, 0x3086, 0x495F },
	{ 0x06, 0x3086, 0x5305 },
	{ 0x06, 0x3086, 0x5307 },
	{ 0x06, 0x3086, 0x4D2B },
	{ 0x06, 0x3086, 0xF810 },
	{ 0x06, 0x3086, 0x164C },
	{ 0x06, 0x3086, 0x0755 },
	{ 0x06, 0x3086, 0x562B },
	{ 0x06, 0x3086, 0xB82B },
	{ 0x06, 0x3086, 0x984E },
	{ 0x06, 0x3086, 0x1129 },
	{ 0x06, 0x3086, 0x9460 },
	{ 0x06, 0x3086, 0x5C09 },
	{ 0x06, 0x3086, 0x5C1B },
	{ 0x06, 0x3086, 0x4002 },
	{ 0x06, 0x3086, 0x4500 },
	{ 0x06, 0x3086, 0x4580 },
	{ 0x06, 0x3086, 0x29B6 },
	{ 0x06, 0x3086, 0x7F80 },
	{ 0x06, 0x3086, 0x4004 },
	{ 0x06, 0x3086, 0x7F88 },
	{ 0x06, 0x3086, 0x4109 },
	{ 0x06, 0x3086, 0x5C0B },
	{ 0x06, 0x3086, 0x29B2 },
	{ 0x06, 0x3086, 0x4115 },
	{ 0x06, 0x3086, 0x5C03 },
	{ 0x06, 0x3086, 0x4105 },
	{ 0x06, 0x3086, 0x5F2B },
	{ 0x06, 0x3086, 0x902B },
	{ 0x06, 0x3086, 0x8081 },
	{ 0x06, 0x3086, 0x6F40 },
	{ 0x06, 0x3086, 0x1041 },
	{ 0x06, 0x3086, 0x0160 },
	{ 0x06, 0x3086, 0x29A2 },
	{ 0x06, 0x3086, 0x29A3 },
	{ 0x06, 0x3086, 0x5F4D },
	{ 0x06, 0x3086, 0x1C17 },
	{ 0x06, 0x3086, 0x0281 },
	{ 0x06, 0x3086, 0xE729 },
	{ 0x06, 0x3086, 0x8345 },
	{ 0x06, 0x3086, 0x8840 },
	{ 0x06, 0x3086, 0x0F7F },
	{ 0x06, 0x3086, 0x8A40 },
	{ 0x06, 0x3086, 0x2345 },
	{ 0x06, 0x3086, 0x8024 },
	{ 0x06, 0x3086, 0x4008 },
	{ 0x06, 0x3086, 0x7F88 },
	{ 0x06, 0x3086, 0x5D29 },
	{ 0x06, 0x3086, 0x9288 },
	{ 0x06, 0x3086, 0x102B },
	{ 0x06, 0x3086, 0x0489 },
	{ 0x06, 0x3086, 0x165C },
	{ 0x06, 0x3086, 0x4386 },
	{ 0x06, 0x3086, 0x170B },
	{ 0x06, 0x3086, 0x5C03 },
	{ 0x06, 0x3086, 0x8A48 },
	{ 0x06, 0x3086, 0x4D4E },
	{ 0x06, 0x3086, 0x2B80 },
	{ 0x06, 0x3086, 0x4C09 },
	{ 0x06, 0x3086, 0x4119 },
	{ 0x06, 0x3086, 0x816F },
	{ 0x06, 0x3086, 0x4110 },
	{ 0x06, 0x3086, 0x4001 },
	{ 0x06, 0x3086, 0x6029 },
	{ 0x06, 0x3086, 0x8229 },
	{ 0x06, 0x3086, 0x8329 },
	{ 0x06, 0x3086, 0x435C },
	{ 0x06, 0x3086, 0x055F },
	{ 0x06, 0x3086, 0x4D1C },
	{ 0x06, 0x3086, 0x81E7 },
	{ 0x06, 0x3086, 0x4502 },
	{ 0x06, 0x3086, 0x8180 },
	{ 0x06, 0x3086, 0x7F80 },
	{ 0x06, 0x3086, 0x410A },
	{ 0x06, 0x3086, 0x9144 },
	{ 0x06, 0x3086, 0x1609 },
	{ 0x06, 0x3086, 0x2FC3 },
	{ 0x06, 0x3086, 0xB130 },
	{ 0x06, 0x3086, 0xC3B1 },
	{ 0x06, 0x3086, 0x0343 },
	{ 0x06, 0x3086, 0x164A },
	{ 0x06, 0x3086, 0x0A43 },
	{ 0x06, 0x3086, 0x160B },
	{ 0x06, 0x3086, 0x4316 },
	{ 0x06, 0x3086, 0x8F43 },
	{ 0x06, 0x3086, 0x1690 },
	{ 0x06, 0x3086, 0x4316 },
	{ 0x06, 0x3086, 0x7F81 },
	{ 0x06, 0x3086, 0x450A },
	{ 0x06, 0x3086, 0x410F },
	{ 0x06, 0x3086, 0x7F83 },
	{ 0x06, 0x3086, 0x5D29 },
	{ 0x06, 0x3086, 0x4488 },
	{ 0x06, 0x3086, 0x102B },
	{ 0x06, 0x3086, 0x0453 },
	{ 0x06, 0x3086, 0x0D40 },
	{ 0x06, 0x3086, 0x2345 },
	{ 0x06, 0x3086, 0x0240 },
	{ 0x06, 0x3086, 0x087F },
	{ 0x06, 0x3086, 0x8053 },
	{ 0x06, 0x3086, 0x0D89 },
	{ 0x06, 0x3086, 0x165C },
	{ 0x06, 0x3086, 0x4586 },
	{ 0x06, 0x3086, 0x170B },
	{ 0x06, 0x3086, 0x5C05 },
	{ 0x06, 0x3086, 0x8A60 },
	{ 0x06, 0x3086, 0x4B91 },
	{ 0x06, 0x3086, 0x4416 },
	{ 0x06, 0x3086, 0x09C1 },
	{ 0x06, 0x3086, 0x2CA9 },
	{ 0x06, 0x3086, 0xAB30 },
	{ 0x06, 0x3086, 0x51B3 },
	{ 0x06, 0x3086, 0x3D5A },
	{ 0x06, 0x3086, 0x7E3D },
	{ 0x06, 0x3086, 0x7E19 },
	{ 0x06, 0x3086, 0x8000 },
	{ 0x06, 0x3086, 0x8B1F },
	{ 0x06, 0x3086, 0x2A1F },
	{ 0x06, 0x3086, 0x83A2 },
	{ 0x06, 0x3086, 0x7516 },
	{ 0x06, 0x3086, 0xAD33 },
	{ 0x06, 0x3086, 0x450A },
	{ 0x06, 0x3086, 0x7F53 },
	{ 0x06, 0x3086, 0x8023 },
	{ 0x06, 0x3086, 0x8C66 },
	{ 0x06, 0x3086, 0x7F13 },
	{ 0x06, 0x3086, 0x8184 },
	{ 0x06, 0x3086, 0x1481 },
	{ 0x06, 0x3086, 0x8031 },
	{ 0x06, 0x3086, 0x3D64 },
	{ 0x06, 0x3086, 0x452A },
	{ 0x06, 0x3086, 0x9451 },
	{ 0x06, 0x3086, 0x9E96 },
	{ 0x06, 0x3086, 0x3D2B },
	{ 0x06, 0x3086, 0x3D1B },
	{ 0x06, 0x3086, 0x529F },
	{ 0x06, 0x3086, 0x0E3D },
	{ 0x06, 0x3086, 0x083D },
	{ 0x06, 0x3086, 0x167E },
	{ 0x06, 0x3086, 0x307E },
	{ 0x06, 0x3086, 0x1175 },
	{ 0x06, 0x3086, 0x163E },
	{ 0x06, 0x3086, 0x970E },
	{ 0x06, 0x3086, 0x82B2 },
	{ 0x06, 0x3086, 0x3D7F },
	{ 0x06, 0x3086, 0xAC3E },
	{ 0x06, 0x3086, 0x4502 },
	{ 0x06, 0x3086, 0x7E11 },
	{ 0x06, 0x3086, 0x7FD0 },
	{ 0x06, 0x3086, 0x8000 },
	{ 0x06, 0x3086, 0x8C66 },
	{ 0x06, 0x3086, 0x7F90 },
	{ 0x06, 0x3086, 0x8194 },
	{ 0x06, 0x3086, 0x3F44 },
	{ 0x06, 0x3086, 0x1681 },
	{ 0x06, 0x3086, 0x8416 },
	{ 0x06, 0x3086, 0x2C2C },
	{ 0x06, 0x3086, 0x2C2C },
	{ 0x06, 0x302A, 0x0005 },
	{ 0x06, 0x302C, 0x0001 },
	{ 0x06, 0x302E, 0x0003 },
	//	{0x06,0x3030, 0x0030},
	{ 0x06, 0x3030, 0x0020 },

	{ 0x06, 0x3036, 0x000A },
	{ 0x06, 0x3038, 0x0001 },
	{ 0x06, 0x30B0, 0x0028 },
	{ 0x06, 0x31B0, 0x0082 },
	{ 0x06, 0x31B2, 0x005C },
	{ 0x06, 0x31B4, 0x5248 },
	{ 0x06, 0x31B6, 0x3257 },
	{ 0x06, 0x31B8, 0x904B },
	{ 0x06, 0x31BA, 0x030B },
	{ 0x06, 0x31BC, 0x8E09 },
	{ 0x06, 0x3354, 0x002B },
	{ 0x06, 0x31AE, 0x0204 },
	{ 0x06, 0x3002, 0x0008 },
	{ 0x06, 0x3004, 0x0008 },
	{ 0x06, 0x3006, 0x04B7 },
	{ 0x06, 0x3008, 0x0787 },
	{ 0x06, 0x300A, 0x04c8 },
	//{0x06,0x300A, 0x0480},
	//	{0x06,0x300A, 0x0400},
	//		{0x06,0x300C, 0x04C4},
	//{0x06,0x300C, 0x0648},
	{ 0x06, 0x300C, 0x0268 },
	//{0x06,0x3012, 0x02DC},
	{ 0x06, 0x3012, 0x00DC },
	{ 0x06, 0x31AC, 0x0A0A }, // DATA_FORMAT_BITS = 2570
	{ 0x06, 0x306E, 0x9010 }, // DATAPATH_SELECT = 36880
	{ 0x06, 0x30A2, 0x0001 }, // X_ODD_INC = 1
	{ 0x06, 0x30A6, 0x0001 }, // Y_ODD_INC = 1
	{ 0x06, 0x3082, 0x0003 }, // OPERATION_MODE_CTRL = 3
	{ 0x06, 0x3040, 0x0000 }, // READ_MODE = 0
	{ 0x06, 0x31D0, 0x0000 }, // COMPANDING = 0
	{ 0x06, 0x301A, 0x205C },
	{ 0x06, AR0234_TABLE_WAIT_MS, 100 },
	{ 0x06, 0x3044, 0x0410 },
	{ 0x06, 0x3094, 0x03D4 },
	{ 0x06, 0x3096, 0x0480 },
	{ 0x06, 0x30BA, 0x7602 },
	{ 0x06, 0x30B0, 0x0028 },
	{ 0x06, 0x30FE, 0x002A },
	{ 0x06, 0x31DE, 0x0410 },
	{ 0x06, 0x3ED6, 0x1435 },
	{ 0x06, 0x3ED8, 0x9865 },
	{ 0x06, 0x3EDA, 0x7698 },
	{ 0x06, 0x3EDC, 0x99FF },
	{ 0x06, 0x3EE2, 0xBB88 },
	{ 0x06, 0x3EE4, 0x8836 },
	{ 0x06, 0x3EF0, 0x1CF0 },
	{ 0x06, 0x3EF2, 0x0000 },
	{ 0x06, 0x3EF8, 0x6166 },
	{ 0x06, 0x3EFA, 0x3333 },
	{ 0x06, 0x3EFC, 0x6634 },
	{ 0x06, 0x3276, 0x05DC },
	{ 0x06, 0x3F00, 0x9D05 },
	{ 0x06, 0x3ED2, 0xFA86 },
	{ 0x06, 0x3EEE, 0xA4FE },
	{ 0x06, 0x30BA, 0x7602 },
	{ 0x06, 0x3180, 0xC24F },
	{ 0x06, 0x3ECC, 0x6E42 },
	{ 0x06, 0x3ECC, 0x0E42 },
	{ 0x06, 0x3EEC, 0x0C0C },
	{ 0x06, 0x3EE8, 0xAAE4 },
	{ 0x06, 0x3EE6, 0x3363 },
	{ 0x06, 0x3EE6, 0x3363 },
	{ 0x06, 0x3EE8, 0xAAE4 },
	{ 0x06, 0x3EE8, 0xAAE4 },
	{ 0x06, 0x3102, 0x5000 },
	{ 0x06, 0x3060, 0x000D },
	{ 0x06, 0x3ED0, 0xFF44 },
	{ 0x06, 0x3ED2, 0xAA86 },
	{ 0x06, 0x3ED4, 0x031F },
	{ 0x06, 0x3EEE, 0xA4AA },
	{ 0x06, 0x301a, 0x2058 },

	{ 0x06, 0x3034, 0x0000 }, // reset address pointer
	{ 0x06, 0x3066,
	  0xF863 }, // set 7 (6+1) contexts bit7-4, high address 0x3
	{ 0x06, 0x3066, 0x0809 }, // set address x3012, CIT
	{ 0x06, 0x3066, 0x0010 }, // context 0
	{ 0x06, 0x3066, 0x0100 }, // context 1
	{ 0x06, 0x3066, 0x0200 }, // context 2
	{ 0x06, 0x3066, 0x0040 }, // context 3
	{ 0x06, 0x3066, 0x0050 }, // context 4
	{ 0x06, 0x3066, 0x0060 }, // context 5
	{ 0x06, 0x3066, 0x0070 }, // context 6
	{ 0x06, 0x3066, 0xF863 }, // set 7 contexts bit7-4, high address 0x3
	{ 0x06, 0x3066, 0x0830 }, // set address x3060, analog gain
	{ 0x06, 0x3066, 0x0010 }, // context 0
	{ 0x06, 0x3066, 0x0010 }, // context 1
	{ 0x06, 0x3066, 0x0020 }, // context 2
	{ 0x06, 0x3066, 0x0020 }, // context 3
	{ 0x06, 0x3066, 0x0030 }, // context 4
	{ 0x06, 0x3066, 0x0030 }, // context 5
	{ 0x06, 0x3066, 0x0040 }, // context 6
	{ 0x06, 0x3066, 0x0000 }, // end of code

	{ 0x06, 0x3034, 0x0220 }, // stop auto cycling
	{ 0x00, AR0234_TABLE_END, 0x00 },
};

static struct index_reg_8 ar0234_960x600_crop_120fps[] = {
	{ 0x06, 0x301A, 0x00D9 }, { 0x06, AR0234_TABLE_WAIT_MS, 100 },
	{ 0x06, 0x3F4C, 0x121F }, { 0x06, 0x3F4E, 0x121F },
	{ 0x06, 0x3F50, 0x0B81 }, { 0x06, 0x31E0, 0x0003 },
	{ 0x06, 0x30B0, 0x0000 }, { 0x06, 0x302A, 0x0005 },
	{ 0x06, 0x302C, 0x0001 }, { 0x06, 0x302E, 0x0003 },
	{ 0x06, 0x3030, 0x0020 }, { 0x06, 0x3036, 0x000A },
	{ 0x06, 0x3038, 0x0001 }, { 0x06, 0x30B0, 0x0000 },
	{ 0x06, 0x31B0, 0x0082 }, { 0x06, 0x31B2, 0x005C },
	{ 0x06, 0x31B4, 0x51C8 }, { 0x06, 0x31B6, 0x3257 },
	{ 0x06, 0x31B8, 0x904B }, { 0x06, 0x31BA, 0x030B },
	{ 0x06, 0x31BC, 0x8E09 }, { 0x06, 0x3354, 0x002B },
	{ 0x06, 0x31D0, 0x0000 }, { 0x06, 0x31AE, 0x0204 },
	{ 0x06, 0x3002, 0x0008 }, { 0x06, 0x3004, 0x0002 },
	{ 0x06, 0x3006, 0x04B7 }, { 0x06, 0x3008, 0x0781 },
	{ 0x06, 0x3064, 0x1802 }, { 0x06, 0x300A, 0x0268 },
	{ 0x06, 0x300C, 0x0264 }, { 0x06, 0x30A2, 0x0003 },
	{ 0x06, 0x30A6, 0x0003 }, { 0x06, 0x3012, 0x024C },
	{ 0x06, 0x3786, 0x0006 }, { 0x06, 0x31AC, 0x0A0A },
	{ 0x06, 0x306E, 0x9010 }, { 0x06, 0x3082, 0x0003 },
	{ 0x06, 0x3040, 0x3000 }, { 0x06, 0x30B0, 0x0028 },
	{ 0x06, 0x3088, 0x8050 }, { 0x06, 0x3086, 0x9237 },
	{ 0x06, 0x3096, 0x0280 }, { 0x06, 0x3180, 0xC24F },
	{ 0x06, 0x3ECC, 0x0E42 }, { 0x06, 0x30BA, 0x7602 },
	{ 0x06, 0x30F0, 0x2283 }, { 0x06, 0x3102, 0x5000 },
	{ 0x06, 0x3060, 0x000D }, { 0x06, 0x3ED2, 0xAA00 },
	{ 0x06, 0x3EEE, 0xA4AA }, { 0x00, AR0234_TABLE_END, 0x00 },
};

static struct index_reg_8 tp_colorbars[] = {

	{ 0x06, 0x3070, 0x2 },

	{ 0x00, AR0234_TABLE_END, 0x00 },

};

enum {
	AR0234_MODE_1920X1200_CROP_30FPS,
	AR0234_MODE_960X600_CROP_120FPS,
	AR0234_MODE_START_STREAM,
	AR0234_MODE_STOP_STREAM,
	AR0234_MODE_Dser_Ser,
	AR0234_MODE_TEST_PATTERN
};

static struct index_reg_8 *mode_table[] = {
	[AR0234_MODE_1920X1200_CROP_30FPS] = ar0234_1920x1200_crop_30fps,
	[AR0234_MODE_960X600_CROP_120FPS] = ar0234_960x600_crop_120fps,
	[AR0234_MODE_START_STREAM] = ar0234_start,
	[AR0234_MODE_STOP_STREAM] = ar0234_stop,
	[AR0234_MODE_Dser_Ser] = ar0234_Double_Dser_Ser,
	[AR0234_MODE_TEST_PATTERN] = tp_colorbars,

};

static const int ar0234_30fps[] = {
	30,
};

static const int ar0234_36fps[] = {
	36,
};

static const int ar0234_18fps[] = {
	18,
};
static const int ar0234_60fps[] = {
	60,
};

static const int ar0234_120fps[] = {
	120,
};
static const struct camera_common_frmfmt ar0234_frmfmt[] = {
	{ { 1920, 1200 }, ar0234_60fps, 1, 0, AR0234_MODE_1920X1200_CROP_30FPS },
	{ { 960, 600 }, ar0234_120fps, 1, 0, AR0234_MODE_960X600_CROP_120FPS },
};
#endif /* __AR0234_I2C_TABLES__ */
